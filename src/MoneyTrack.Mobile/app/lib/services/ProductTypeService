class ProductType {
  final int id;
  final String name;

  ProductType({
    required this.id,
    required this.name,
  });

  factory ProductType.fromJson(Map<String, dynamic> json) {
    return ProductType(
      id: json['id'],
      name: json['name'],
    );
  }
}

Future<ProductType> fetchProductType() async {
  final response = await http
      .get(Uri.parse('http://host.docker.internal:202/api/v1/Product/type/list'),headers: { 'Accept' : 'application/json' });

  if (response.statusCode == 200) {
    // If the server did return a 200 OK response,
    // then parse the JSON.
    Iterable l = json.decode(response.body);
    List<ProductType> productTypes = List<ProductType>.from(l.map((model)=> ProductType.fromJson(model)));

    return productTypes[0];
  } else {
    // If the server did not return a 200 OK response,
    // then throw an exception.
    throw Exception('Failed to load product type');
  }
}